// {
//     id: 1,
//     name: "Basic",
//     tabValue: "basic",
//     description: "Essential features for individuals",
//     price: 9.99,
//     icon: Zap,
//     features: ["Feature 1", "Feature 2", "Feature 3"],
//   },

import { LucideIcon } from "lucide-react";
import { Permissions, Roles } from "../global";

export type Package = {
    id: number;
    name: string;
    tabValue: string;
    description: string;
    price: number;
    icon: LucideIcon;
    users: number | string;
    trialPeriod: string;
    features: string[];
    recuurence: string;
};

export type BankDetails = {
    accountName: string;
    accountNumber: string;
    bankName: string;
    branchName: string;
    branchAddress: string;
    SWIFTCode: string;
};

export type ClerkOrganizationPublicMetadata = 
    {
        country: string,
        domainName: string,
        website: string,
        contactNumber: string,
        address: string,
        subscription: {
          plan: string,
          payhereId: string,
          isTrial: boolean,
          isActive: boolean,
          trialEndDate: string,
    }
};

export type ClerkUserPublicMetadata =
    {
        role: Roles,
        permissions: Permissions[],
        info: {
            contact: string,
            address: string,
        }
        teams: {
            teamId: string,
            orgId: string,
            role: 'manager' | 'member'
        }[]
    };

    export type PayherePaymentNotification = {
        merchant_id: string; // PayHere Merchant ID of the merchant
        order_id: string; // Order ID sent by Merchant to Checkout page
        payment_id: string; // Unique Payment ID generated by PayHere for the processed payment
        subscription_id: string; // Unique Subscription ID generated by PayHere for the authorized subscription
        payhere_amount: string; // Total Amount of the payment
        payhere_currency: string; // Currency code of the payment (LKR/USD)
        status_code: string; // Payment status code (2, 0, -1, -2, -3) {success, pending, canceled, failed, charged back}
        md5sig: string; // Encrypted signature to verify the payment
        custom_1: string; // Custom param 1 sent by merchant to Checkout page
        custom_2: string; // Custom param 2 sent by merchant to Checkout page
        method: string; // Payment method selected by the customer. (VISA, MASTER)
        status_message: string; // Message received from payment gateway which the customer tried to pay
        recurring: string; // Whether payment is a recurring payment (1:recurring, 0: not-recurring)
        message_type: string; // Status message (AUTHORIZATION_SUCCESS, AUTHORIZATION_FAILED, RECURRING_INSTALLMENT_SUCCESS, RECURRING_INSTALLMENT_FAILED, RECURRING_COMPLETE, RECURRING_STOPPED)
        item_recurrence: string; // How often it charges. eg. 1 Month
        item_duration: string; // How long it charges. eg. 1 Year
        item_rec_status: string; // Status of recurring subscription. (0: active, -1: cancelled, 1: completed)
        item_rec_date_next: string; // Date of next recurring installment (YYYY-MM-DD)
        item_rec_install_paid: string; // Number of successful recurring installments charged
        card_holder_name: string; // Card Holder Name
        card_no: string; // Masked card number (Ex: ************4564)
        card_expiry: string; // Card expiry in format MMYY (Ex: 0122)
    };

