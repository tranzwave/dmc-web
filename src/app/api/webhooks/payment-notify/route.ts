
import crypto from 'crypto';
import { NextResponse } from 'next/server';
import { PayherePaymentNotification } from '~/lib/types/payment';
import { generateHash } from '~/lib/utils/paymentUtils';
import { updateSubscriptionNotificationData } from '~/server/auth';

// POST method to verify payment notification
export const POST = async (req: Request) => {
    try {
        const merchantSecret = process.env.PAYHERE_MERCHANT_SECRET ?? '';
        console.log('Request received raw:', req);
        const requestBody = await req.formData();
        const params = Object.fromEntries(
            Array.from(requestBody.entries()).map(([key, value]) => [key, typeof value === 'object' ? JSON.stringify(value) : value.toString()])
        );
    
        console.log('Request received:', params);
    
        const {
            merchant_id, // PayHere Merchant ID of the merchant
            order_id, // Order ID sent by Merchant to Checkout page
            payment_id, // Unique Payment ID generated by PayHere for the processed payment
            subscription_id, // Unique Subscription ID generated by PayHere for the authorized subscription
            payhere_amount, // Total Amount of the payment
            payhere_currency, // Currency code of the payment (LKR/USD)
            status_code, // Payment status code (2, 0, -1, -2, -3) {success, pending, canceled, failed, charged back}
            md5sig, // Encrypted signature to verify the payment
            custom_1, // Custom param 1 sent by merchant to Checkout page (Org Id)
            custom_2, // Custom param 2 sent by merchant to Checkout page (Plan Name)
            method, // Payment method selected by the customer. (VISA, MASTER)
            status_message, // Message received from payment gateway which the customer tried to pay
            recurring, // Whether payment is a recurring payment (1:recurring, 0: not-recurring)
            message_type, // Status message (AUTHORIZATION_SUCCESS, AUTHORIZATION_FAILED, RECURRING_INSTALLMENT_SUCCESS, RECURRING_INSTALLMENT_FAILED, RECURRING_COMPLETE, RECURRING_STOPPED)
            item_recurrence, // How often it charges. eg. 1 Month
            item_duration, // How long it charges. eg. 1 Year
            item_rec_status, // Status of recurring subscription. (0: active, -1: cancelled, 1: completed)
            item_rec_date_next, // Date of next recurring installment (YYYY-MM-DD)
            item_rec_install_paid, // Number of successful recurring installments charged
            card_holder_name, // Card Holder Name
            card_no, // Masked card number (Ex: ************4564)
            card_expiry // Card expiry in format MMYY (Ex: 0122)
        } = params;

        const paymentNotificationData = params as PayherePaymentNotification;
        const localMd5sig = crypto
            .createHash('md5')
            .update(
                `${merchant_id}${order_id}${payhere_amount}${payhere_currency}${status_code}${crypto
                    .createHash('md5')
                    .update(merchantSecret)
                    .digest('hex')
                    .toUpperCase()}`
            )
            .digest('hex')
            .toUpperCase();

        console.log('Received MD5 signature:', md5sig);
        console.log('Local MD5 signature:', localMd5sig);
    
        if (localMd5sig === md5sig) {
            console.log('Payment verified successfully');
            // Update your database with the payment status
            // Example: updatePaymentStatus(order_id, status_code, payment_id, method, status_message, card_holder_name, card_no, card_expiry);

            if (status_code && custom_1){

                await updateSubscriptionNotificationData(custom_1, paymentNotificationData)

            } else {
                console.error("Couldn't find status code or orgId in payment notification data");
                throw new Error("Couldn't find status code or orgId in payment notification data");
            }
    
            return NextResponse.json({ message: 'Payment verified successfully' });
        } else {
            console.error('Payment verification failed');
            return NextResponse.json({ message: 'Payment verification failed' }, { status: 400 });
        }
        
    } catch (error) {
        console.error('Error in payment notification:', error);
        
    }
};

function onPaymentSuccess(paymentNotificationData: PayherePaymentNotification) {
    // Handle successful payment
    console.log('Payment successful');
}

function onPaymentFailure(paymentNotificationData: PayherePaymentNotification) {
    // Handle failed payment
    console.log('Payment failed');
}




